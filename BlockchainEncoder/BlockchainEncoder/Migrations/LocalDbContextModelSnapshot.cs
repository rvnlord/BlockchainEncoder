// <auto-generated />
using System;
using BlockchainEncoder.Source.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlockchainEncoder.Migrations
{
    [DbContext(typeof(LocalDbContext))]
    partial class LocalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("BlockchainEncoder.Source.DbContext.Models.DbRawBlock", b =>
                {
                    b.Property<long>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ExpandedBlockHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("RawData")
                        .HasColumnType("BLOB");

                    b.HasKey("Index");

                    b.ToTable("RawBlocks", (string)null);
                });

            modelBuilder.Entity("BlockchainEncoder.Source.DbContext.Models.DbTwoBytesMap", b =>
                {
                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<long>("BlockId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndexInBlock")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Value")
                        .HasColumnType("BLOB");

                    b.HasKey("Index");

                    b.HasIndex("BlockId");

                    b.ToTable("TwoByteMaps", (string)null);
                });

            modelBuilder.Entity("BlockchainEncoder.Source.DbContext.Models.DbTwoBytesMap", b =>
                {
                    b.HasOne("BlockchainEncoder.Source.DbContext.Models.DbRawBlock", "Block")
                        .WithMany("TwoByteMaps")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("BlockchainEncoder.Source.DbContext.Models.DbRawBlock", b =>
                {
                    b.Navigation("TwoByteMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
